# Downloading and exploring the data
library(readr)
library(tibble)
library(tidyverse)
covid_df <- read_csv("covid19.csv")
dim(covid_df)
vector_cols <- colnames(covid_df)
vector_cols
head(covid_df)
glimpse(covid_df)
covid_df_all_states <- covid_df %>%
filter(Province_State == "All States") %>%
select(-Province_State)
covid_df_all_states_daily <- covid_df_all_states %>%
select(Date,
Country_Region,
active,
hospitalizedCurr,
daily_tested,
daily_positive
)
covid_df_all_states_daily_sum <- covid_df_all_states_daily %>%
group_by(Country_Region) %>%
summarise(tested = sum(daily_tested),
positive = sum(daily_positive),
active = sum(active),
hospitalized = sum(hospitalizedCurr)) %>%
arrange(desc(tested))
covid_df_all_states_daily_sum
covid_top_10 <- covid_df_all_states_daily_sum %>%
head(10)
covid_top_10
countries <- covid_top_10$Country_Region
tested_cases <- covid_top_10$tested
positive_cases <- covid_top_10$positive
active_cases <- covid_top_10$active
hospitalized_cases <- covid_top_10$hospitalized
names(tested_cases) <- countries
names(positive_cases) <- countries
names(active_cases) <- countries
names(hospitalized_cases) <- countries
positive_tested <- positive_cases / tested_cases
positive_tested_top_3 <- positive_tested[c("United Kingdom","United States", "Turkey")]
positive_tested_top_3
united_kingdom <- c(0.11, 1473672, 166909, 0, 0)
united_states <- c(0.10, 17282363, 1877179, 0, 0)
turkey <- c(0.08, 2031192, 163941, 2980960, 0)
covid_mat <- rbind(united_kingdom, united_states, turkey)
colnames(covid_mat) <- c("Ratio", "tested", "positive", "active", "hospitalized")
covid_mat
question <- "Which countries have had the highest number of positive cases against the number of tests?"
answer <- c("Positive tested cases" = positive_tested_top_3)
question <- "Which countries have had the highest number of positive cases against the number of tests?"
answer <- c("Positive tested cases" = positive_tested_top_3)
dataframes <- list(
original = covid_df,
allstates = covid_df_all_states,
daily = covid_df_all_states_daily,
top_10 = covid_top_10
)
matrices <- list(covid_mat)
vectors <- list(vector_cols, countries)
data_structure_list <- list("datasets" = dataframes,
"matrix" = matrices,
"vector" = vectors)
covid_analysis_list <- list(question, answer, data_structure_list)
# solution
covid_analysis_list[[2]]
positive_tested_top_3[[2]]
positive_tested_top_3["United Kingdom"]
type(positive_tested_top_3)
positive_tested_top_3
positive_tested_top_3 %>%
round(2)
positive_tested_top_3 %>%
round(3)
positive_tested_top_3 <- positive_tested_top_3 %>%
round(3)
# solution
covid_analysis_list[[2]]
question <- "Which countries have had the highest number of positive cases against the number of tests?"
answer <- c("Positive tested cases" = positive_tested_top_3)
dataframes <- list(
original = covid_df,
allstates = covid_df_all_states,
daily = covid_df_all_states_daily,
top_10 = covid_top_10
)
matrices <- list(covid_mat)
vectors <- list(vector_cols, countries)
data_structure_list <- list("datasets" = dataframes,
"matrix" = matrices,
"vector" = vectors)
covid_analysis_list <- list(question, answer, data_structure_list)
# solution
covid_analysis_list[[2]]
library(readr)
library(tibble)
library(tidyverse)
covid_df <- read_csv("covid19.csv")
dim(covid_df)
vector_cols <- colnames(covid_df)
vector_cols
head(covid_df)
glimpse(covid_df)
covid_df_all_states <- covid_df %>%
filter(Province_State == "All States") %>%
select(-Province_State)
covid_df_all_states_daily <- covid_df_all_states %>%
select(Date,
Country_Region,
active,
hospitalizedCurr,
daily_tested,
daily_positive
)
covid_df_all_states_daily_sum <- covid_df_all_states_daily %>%
group_by(Country_Region) %>%
summarise(tested = sum(daily_tested),
positive = sum(daily_positive),
active = sum(active),
hospitalized = sum(hospitalizedCurr)) %>%
arrange(desc(tested))
covid_df_all_states_daily_sum
covid_top_10 <- covid_df_all_states_daily_sum %>%
head(10)
covid_top_10
countries <- covid_top_10$Country_Region
tested_cases <- covid_top_10$tested
positive_cases <- covid_top_10$positive
active_cases <- covid_top_10$active
hospitalized_cases <- covid_top_10$hospitalized
names(tested_cases) <- countries
names(positive_cases) <- countries
names(active_cases) <- countries
names(hospitalized_cases) <- countries
positive_tested <- positive_cases / tested_cases
positive_tested_top_3 <- positive_tested[c("United Kingdom","United States", "Turkey")]
positive_tested_top_3 <- positive_tested_top_3 %>%
round(3)
united_kingdom <- c(0.11, 1473672, 166909, 0, 0)
united_states <- c(0.10, 17282363, 1877179, 0, 0)
turkey <- c(0.08, 2031192, 163941, 2980960, 0)
covid_mat <- rbind(united_kingdom, united_states, turkey)
colnames(covid_mat) <- c("Ratio", "tested", "positive", "active", "hospitalized")
covid_mat
question <- "Which countries have had the highest number of positive cases against the number of tests?"
answer <- c("Positive tested cases" = positive_tested_top_3)
dataframes <- list(
original = covid_df,
allstates = covid_df_all_states,
daily = covid_df_all_states_daily,
top_10 = covid_top_10
)
matrices <- list(covid_mat)
vectors <- list(vector_cols, countries)
data_structure_list <- list("datasets" = dataframes,
"matrix" = matrices,
"vector" = vectors)
covid_analysis_list <- list(question, answer, data_structure_list)
# solution
covid_analysis_list[[2]]
library(readr)
library(tibble)
library(tidyverse)
covid_df <- read_csv("covid19.csv")
dim(covid_df)
vector_cols <- colnames(covid_df)
vector_cols
head(covid_df)
glimpse(covid_df)
covid_df_all_states <- covid_df %>%
filter(Province_State == "All States") %>%
select(-Province_State)
covid_df_all_states_daily <- covid_df_all_states %>%
select(Date,
Country_Region,
active,
hospitalizedCurr,
daily_tested,
daily_positive
)
covid_df_all_states_daily_sum <- covid_df_all_states_daily %>%
group_by(Country_Region) %>%
summarise(tested = sum(daily_tested),
positive = sum(daily_positive),
active = sum(active),
hospitalized = sum(hospitalizedCurr)) %>%
arrange(desc(tested))
covid_df_all_states_daily_sum
covid_top_10 <- covid_df_all_states_daily_sum %>%
head(10)
covid_top_10
countries <- covid_top_10$Country_Region
tested_cases <- covid_top_10$tested
positive_cases <- covid_top_10$positive
active_cases <- covid_top_10$active
hospitalized_cases <- covid_top_10$hospitalized
names(tested_cases) <- countries
names(positive_cases) <- countries
names(active_cases) <- countries
names(hospitalized_cases) <- countries
positive_tested <- positive_cases / tested_cases
positive_tested_top_3 <- positive_tested[c("United Kingdom","United States", "Turkey")]
positive_tested_top_3 <- positive_tested_top_3 %>%
round(3)
united_kingdom <- c(0.11, 1473672, 166909, 0, 0)
united_states <- c(0.10, 17282363, 1877179, 0, 0)
turkey <- c(0.08, 2031192, 163941, 2980960, 0)
covid_mat <- rbind(united_kingdom, united_states, turkey)
colnames(covid_mat) <- c("Ratio", "tested", "positive", "active", "hospitalized")
covid_mat
question <- "Which countries have had the highest number of positive cases against the number of tests?"
answer <- c("Positive tested cases" = positive_tested_top_3)
dataframes <- list(
original = covid_df,
allstates = covid_df_all_states,
daily = covid_df_all_states_daily,
top_10 = covid_top_10
)
matrices <- list(covid_mat)
vectors <- list(vector_cols, countries)
data_structure_list <- list("datasets" = dataframes,
"matrix" = matrices,
"vector" = vectors)
covid_analysis_list <- list(question, answer, data_structure_list)
# solution
covid_analysis_list[[2]]
distinct(covid_df, Country_Region)
n_distinct(covid_df, Country_Region)
distinct(covid_df, Country_Region) %>%
count()
distinct(covid_df) %>%
count()
distinct(covid_df$Country_Region) %>%
count()
distinct(covid_df, Country_Region) %>%
count()
covid_df %>%
min(Date) %>%
max(Date)
covid_df %>%
min(Date)
covid_df %>%
min(covid_df$Date)
glimpse(covid_df)
min(covid_df, Date)
distinct(covid_df, Country_Region) %>%
count()
millimeter_measurements <- c(10000, 54900, 94312, 49185, 2100)
meter_measurements = c()
for (measurement in millimeter_measurements) {
meter <- measurement / 1000
meter_measurements <- c(meter_measurements, meter)
}
millimeter_measurements <- c(10000, 54900, 94312, 49185, 2100)
meter_measurements <- integer(length(millimeter_measurements))
indices <- 1:length(millimeter_measurements)
for (i in indices) {
meter <- millimeter_measurements[i] / 1000
meters[i] <- meter
}
meter_measurements[i] <- meter
millimeter_measurements <- c(10000, 54900, 94312, 49185, 2100)
meter_measurements <- integer(length(millimeter_measurements))
indices <- 1:length(millimeter_measurements)
for (i in indices) {
meter <- millimeter_measurements[i] / 1000
meter_measurements[i] <- meter
}
prices <- c(138.19, 82.72, 118.97, 77.55, 62.28, 89.71, 97.36, 91.98, 113.45, 73.93)
is_below_70 <- FALSE
i <- 1
while (!is_below_70) {
buy_price <- prices[i]
is_below_70 <- buy_price < 70
i = i + 1
first_vec <- c(1, 5, 4, 2, 3, 7, 6)
second_vec <- c(9, 2, 1, 8, 3, 4, 5, 6, 10, 7, 12, 11)
third_vec <- c(8, 3, 5, 1, 7, 1, 10)
find_longer_vector <- function(vec_one, vec_two){
if (length(vec_one) > length(vec_two)){
return("First")
} else if (length(vec_one) < length(vec_two)){
return("Second")
} else {
return("Equal Length")
}
}
first_vs_second <- find_longer_vector(first_vec, second_vec)
first_vs_third <- find_longer_vector(first_vec, third_vec)
is_divisible <- function(first, second){
if (first/second == floor(first/second)){
return(TRUE)}
else{return(FALSE)}
}
div_5731_by_11 <- is_divisible(5731, 11)
is_divisible <- function(first, second){
if (first/second == floor(first/second)) {
return(TRUE)
} else {return(FALSE)
}
}
subtract_all <- function(x, ...) {
current_num = x
for (num in list(...)) {
current_num = current_num - num
}
return(current_num)
}
first_subtraction <- subtract_all(10, 3, 2, 1)
second_subtraction <- subtract_all(100, 71, 22)
setwd("~/projects/R_learning/dataquest/APIs")
install.packages("httr")
library(httr)
wb_api_json_get_df <- function(endpoint){
url <- modify_url("http://api.worldbank.org", path = endpoint)
return(url)
}
wb_country_url <- wb_api_json_get_df("v2/country")
# Edit this function with respect to the first instruction
wb_api_json_get_df <- function(endpoint) {
# Preparing the URL
url <- modify_url("http://api.worldbank.org", path = endpoint)
# TODO 1: add code to query the API
response <- GET(url)
# TODO 2: modify to return the API response
return(response)
}
# Type the answer to the second instruction below
wb_indicator_response <- wb_api_json_get_df("v2/indicator?format=json")
wb_indicator_response
wb_api_json_get_df <- function(endpoint) {
# Preparing the URL
url <- modify_url("http://api.worldbank.org", path = endpoint)
# API requests
response <- GET(url)
# TODO: Add code to track errors here
if (http_error(response)){
print(status_code(response))
stop("Something went wrong.", call. = FALSE)
}
if (http_type(response) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Returning the API Response
response
}
# Type the answer to the second instruction below
wb_indicator_response <- wb_api_json_get_df("v2/indicator?format=json")
# Devuelve el contenido de la peticion
wb_api_json_get_df <- function(endpoint) {
# Preparing the URL
url <- modify_url("http://api.worldbank.org", path = endpoint)
# API requests
response <- GET(url)
# Tracking errors
if ( http_error(response) ){
print(status_code(response))
stop("Something went wrong.", call. = FALSE)
}
if (http_type(response) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Extract content
content <- content(response, as = "text")
# Return the extracted content
return(content)
}
wb_indicator_json_text <- wb_api_json_get_df("v2/indicator?format=json")
View(wb_api_json_get_df)
View(wb_indicator_response)
View(wb_indicator_json_text)
View(wb_indicator_json_text)
# Convertir respuesta en un df
wb_api_json_get_df <- function(endpoint) {
# Preparing the URL
url <- modify_url("http://api.worldbank.org", path = endpoint)
# API requests
response <- GET(url)
# Tracking errors
if ( http_error(response) ){
print(status_code(response))
stop("Something went wrong.", call. = FALSE)
}
if (http_type(response) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Extracting content
json_text <- content(response, "text")
# Convert the extracted content into a dataframe
dataframe <- jsonlite::fromJSON(json_text)
# Modify to return the dataframe
return(dataframe)
}
# Type the answer to the second instruction below
wb_indicator_json_df <- wb_api_json_get_df("v2/indicator?format=json")
wb_indicator_json_df
# Extracting the real dataframe [[2]] from the output list
wb_api_json_get_df <- function(endpoint) {
# Preparing the URL
url <- modify_url("http://api.worldbank.org", path = endpoint)
# API requests
response <- GET(url)
# Tracking errors
if ( http_error(response) ){
print(status_code(response))
stop("Something went wrong.", call. = FALSE)
}
if (http_type(response) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Extracting content
json_text <- content(response, "text")
# Converting content into Dataframe
dataframe <- jsonlite::fromJSON(json_text)
# Return the dataframe
return(dataframe[[2]])
}
wb_indicator_json_df <- wb_api_json_get_df("v2/indicator?format=json")
wb_indicator_json_df
head(wb_indicator_json_df)
wb_indicator_df <- wb_api_json_get_df("v2/indicator?format=json")
head(wb_indicator_df)
# Añadimos el GET request con parámetro query de GET(url, query = list(format="json"))
response <- httr::GET(
"http://api.worldbank.org/v2/indicator",
query = list(format="json")
)
json_df <- jsonlite::fromJSON(httr::content(response, "text"))[[2]]
str(json_df)
}
# metemos la query como parametro en la funcion
wb_api_json_get_df <- function(endpoint, queries = list()){
# Preparing the URL
url <- modify_url("http://api.worldbank.org", path = endpoint)
# API requests
response <- GET(url, query = queries)
# Tracking errors
if ( http_error(response) ){
print(status_code(response))
stop("Something went wrong.", call. = FALSE)
}
if ( http_type(response) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Extracting content
json_text <- content(response, "text")
# Converting content into Dataframe
dataframe <- jsonlite::fromJSON(json_text)
# Return the dataframe
dataframe[[2]]
}
# Type the answer to the second instruction below
wb_indicator_df_with_param <- wb_api_json_get_df(
"v2/indicator",
list(format="json")
)
wb_indicator_df_with_param
head(wb_indicator_df_with_param)
# two pagination query parameters: page and per_page
response <- httr::GET("http://api.worldbank.org/v2/indicator",
query = list(format = "json", page=2, per_page = 100))
json_df <- jsonlite::fromJSON(httr::content(response, "text"))[[2]]
str(json_df)
wb_indicator_json_df_3 <- wb_api_json_get_df(
"v2/indicator",
queries = list(
format = "json",
page=3,
per_page=75)
)
wb_indicator_json_df_3
gov_api_json <- function(endpoint, queries = list()) {
# Preparing the URL
url <- modify_url("https://api.ers.usda.gov", path = endpoint)
# API requests
response <- GET(url, query = queries)
# Tracking errors
if ( http_error(response) ){
print(status_code(response))
stop("Something went wrong.", call. = FALSE)
}
if (http_type(response) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Extracting content
json_text <- content(response, "text")
# Return the dataframe
jsonlite::fromJSON(json_text)$data # CHANGE $
}
agriculture_categories <- gov_api_json(
"data/arms/category",
queries = list(api_key="JnFZggTTuOCRw7mCbKJzrgKS5fBpoeS0V7bfOiEu")
)
agriculture_categories
View(agriculture_categories)
# comprobar si una peticion es exitosa, preguntando a httpbin
POST("http://httpbin.org/post",
body = list(comment = "Hello world", name = "authordq"))
# POST(url, body=list(queries))
httpbin_response <- POST("http://httpbin.org/post",
body=list(message = "this is a test",
name = "anomalia"))
check_error <- http_error(httpbin_response)
print(httpbin_response)
# API: https://github.com/15Dkatz/official_joke_api
response <- GET("https://official-joke-api.appspot.com/random_joke")
status <- status_code(response)
content <- content(response)
print(content)
print(status)
